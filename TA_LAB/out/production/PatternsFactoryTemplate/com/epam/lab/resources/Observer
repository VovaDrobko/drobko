The observer pattern is a software design pattern in which an object, called the subject,
maintains a list of its dependents, called observers, and notifies them automatically of any state changes,
usually by calling one of their methods.

Observer Example:

public abstract class Observer {
    protected Subject subject;
    public abstract void update();
}

public class BinaryObserver extends Observer {
    public BinaryObserver(Subject subject) {
        this.subject = subject;
        this.subject.attach(this);
    }
    @Override
    public void update() {
        System.out.println("Binary String: " + Integer.toBinaryString(subject.getState()));
    }
}

public class OctalObserver extends Observer{
    public OctalObserver(Subject subject){
        this.subject = subject;
        this.subject.attach(this);
    }
    @Override
    public void update() {
        System.out.println( "Octal String: " + Integer.toOctalString( subject.getState() ) );
    }
}

public class Subject {
    private List<Observer> observers = new ArrayList<Observer>();
    private int state;

    public void notifyAllObservers() {
        for (Observer observer : observers) {
            observer.update();
        }
    }
    //...
 }

 ObserverDemo.java
 //...
     public void testObserver() {
         Subject subject = new Subject();
         new HexaObserver(subject);
         new OctalObserver(subject);
         new BinaryObserver(subject);
         System.out.println("\nOutput:\nFirst state change: 15");
         subject.setState(15);
         System.out.println("Second state change: 10");
         subject.setState(10);
     }
 //...